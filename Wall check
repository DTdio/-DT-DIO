local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local predictionDots = {} -- Table to store prediction dots for each player
local dotVisible = true -- Toggle for dot visibility

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
local main = Instance.new("Frame")
local ToggleVisibilityButton = Instance.new("TextButton")

ScreenGui.Parent = CoreGui

main.Name = "main"
main.Parent = ScreenGui
main.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
main.BackgroundTransparency = 1 -- Make background transparent
main.Position = UDim2.new(0.404, 0, 0.345, 0) -- Centering position
main.Size = UDim2.new(0, 200, 0, 100) -- Frame size
main.Active = true
main.Draggable = true -- Make the frame draggable

-- Button to toggle dot visibility
ToggleVisibilityButton.Name = "ToggleVisibilityButton"
ToggleVisibilityButton.Parent = main
ToggleVisibilityButton.BackgroundColor3 = Color3.fromRGB(48, 25, 52) -- Very Dark Purple
ToggleVisibilityButton.Position = UDim2.new(0.1, 0, 0.2, 0)
ToggleVisibilityButton.Size = UDim2.new(0, 120, 0, 40)
ToggleVisibilityButton.Font = Enum.Font.SourceSans
ToggleVisibilityButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text color for contrast
ToggleVisibilityButton.TextSize = 20.000 -- Adjusted text size
ToggleVisibilityButton.Text = "Hide Dots" -- Initial text

-- Function to create a prediction dot for a given player
local function createPredictionDot(player)
    local dot = Instance.new("BillboardGui")
    dot.Name = player.Name .. "_PredictionDot"
    dot.Size = UDim2.new(1, 0, 1, 0) -- Size of the GUI
    dot.AlwaysOnTop = true -- Ensure it is always on top
    dot.Parent = workspace

    local dotFrame = Instance.new("Frame")
    dotFrame.Size = UDim2.new(1, 0, 1, 0) -- Frame size to fit the BillboardGui
    dotFrame.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Default to green color
    dotFrame.Parent = dot

    predictionDots[player] = { BillboardGui = dot, Frame = dotFrame }
end

-- Function to check if the target player is visible
local function isPlayerVisible(targetPlayer)
    local localPlayer = Players.LocalPlayer
    local camera = workspace.CurrentCamera
    local character = targetPlayer.Character

    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            local direction = humanoidRootPart.Position - camera.CFrame.Position
            local ray = Ray.new(camera.CFrame.Position, direction.Unit * direction.Magnitude)

            local hitPart, hitPosition = workspace:FindPartOnRay(ray)
            -- Check if the ray hit anything other than the target player's HumanoidRootPart
            return hitPart == nil or hitPart:IsDescendantOf(character)
        end
    end
    return false
end

-- Function to update the prediction dots for all players
local function updatePredictionDots()
    for _, player in pairs(Players:GetPlayers()) do
        if predictionDots[player] then
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart and character:FindFirstChild("Humanoid") then
                    local currentPosition = humanoidRootPart.Position

                    -- Get the humanoid's move direction and velocity
                    local humanoid = character:FindFirstChild("Humanoid")
                    local moveDirection = humanoid.MoveDirection
                    local velocity = humanoidRootPart.Velocity

                    -- Calculate the prediction distance based on movement speed
                    local speed = velocity.Magnitude
                    
                    local minDistance = 2 -- Minimum distance when moving slowly
                    local maxDistance = 10 -- Maximum distance when moving fast
                    local sensitivityFactor = 0.75 -- Lower value makes the dot less sensitive
                    
                    -- Calculate the prediction distance using velocity
                    local predictionDistance = math.clamp((speed * sensitivityFactor), minDistance, maxDistance)

                    -- Calculate the predicted position based on movement direction and speed
                    local predictedPosition

                    if speed > 0 then
                        predictedPosition = currentPosition + (moveDirection.Unit * predictionDistance)
                    else
                        predictedPosition = currentPosition -- Keep at last known position if stopped
                    end

                    -- Set the dot's position slightly above the character's head
                    predictionDots[player].BillboardGui.Adornee = humanoidRootPart

                    -- Change the color based on visibility but keep the dot always rendered
                    if isPlayerVisible(player) then
                        predictionDots[player].Frame.BackgroundColor3 = Color3.fromRGB(0, 255, 0) -- Green if visible
                    else
                        predictionDots[player].Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red if not visible
                    end
                end
            end
        end
    end
end

-- Function to handle new players joining the game
local function onPlayerAdded(newPlayer)
    newPlayer.CharacterAdded:Connect(function(character)
        createPredictionDot(newPlayer) -- Create a prediction dot for the new player
        character:WaitForChild("HumanoidRootPart") -- Wait for the HumanoidRootPart to be available
    end)

    newPlayer.CharacterRemoving:Connect(function()
        if predictionDots[newPlayer] then
            predictionDots[newPlayer].BillboardGui:Destroy() -- Remove the dot when the player leaves
            predictionDots[newPlayer] = nil -- Clear the reference
        end
    end)
end

-- Function to handle players leaving the game
local function onPlayerRemoving(player)
    if predictionDots[player] then
        predictionDots[player].BillboardGui:Destroy() -- Remove the dot when the player leaves
        predictionDots[player] = nil -- Clear the reference
    end
end

-- Connect functions to necessary events
Players.PlayerAdded:Connect(onPlayerAdded)
Players.PlayerRemoving:Connect(onPlayerRemoving)

-- Initial setup for existing players
for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        createPredictionDot(player) -- Create dots for already existing players
    end
end

-- Update the prediction dots continuously if dot visibility is active
RunService.RenderStepped:Connect(updatePredictionDots)

-- Toggle Dot Visibility Button Functionality
ToggleVisibilityButton.MouseButton1Click:Connect(function()
    dotVisible = not dotVisible -- Toggle visibility
    for _, dot in pairs(predictionDots) do
        dot.BillboardGui.Enabled = dotVisible -- Show or hide all dots
    end
    ToggleVisibilityButton.Text = dotVisible and "Hide Dots" or "Show Dots" -- Update button text
end)
                                     
